def version

pipeline {

    agent any

    options {
        timestamps()
        disableConcurrentBuilds()
        timeout(time: 30, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }
    parameters {
        string(name: 'version', description: 'The version to deploy')
    }
    stages {
        stage('Checkout') {
            steps {
                checkout (
                    scm: [
                        $class: 'GitSCM',
                        branches: [[name: 'master']],
                        browser: [$class: 'GithubWeb', repoUrl: 'https://github.com/lreszegi/demo'],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [[$class: 'WipeWorkspace']],
                        submoduleCfg: [],
                        userRemoteConfigs: [[credentialsId: '7e53a0ea-d0fb-4aa4-a80d-ecd9610e9442', url: 'https://github.com/lreszegi/demo.git']]
                    ]
                )
            }
        }
        stage('Deploy') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: '3a54a622-c863-4759-a2a1-a32d1d8764a6', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                    script {
                        sh 'export AWS_DEFAULT_REGION=us-east-1'
                        sh 'export AWS_DEFAULT_OUTPUT=json'
                        sh 'kubectl apply -f /root/aws-auth-cm.yaml'
                        kubeSubst('{version}', version, './src/main/resources/aws-deploy/demo-deployment.yaml')
                        sh 'kubectl apply -f ./src/main/resources/aws-deploy/demo-deployment.yaml'
                        sh 'kubectl rollout status deployment/demo-deployment -w'
                    }
                }
            }
        }
    }

    def kubeSubst(placeholder, value, file) {
      sh "sed -i.bak s/:\\\${$placeholder}/:$value/g $file"
    }
}
